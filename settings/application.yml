app:
  mailer:
    sender_address: ${APP_MAILER_SENDER_ADDRESS}
    max_of_attempts: ${APP_MAILER_MAX_OF_ATTEMPTS}
    otp_template_folder_path: ${APP_MAILER_OTP_TEMPLATE_FOLDER_PATH}
    otp_template_name: ${APP_MAILER_OTP_TEMPLATE_NAME}
  eventer:
    topic-params: [
      {
        topic: "email",
        group_id: "emailVerification"
      },
      {
        topic: "phone",
        group_id: "phoneVerification"
      },
      {
        topic: "email.DLT",
        group_id: "emailDltVerification"
      },
      {
        topic: "phone.DLT",
        group_id: "phoneDltVerification"
      }
    ]
  retry: {
    otp: {
      maxAttempts: 3,
      minDelay: 500,
      jitter: 0.5
    },
    file-service: {
      maxAttempts: 3,
      minDelay: 500,
      jitter: 0.5
    }
  }
  sms:
    otp-template-json-file-path: ${APP_SMS_OTP_TEMPLATE_JSON_FILE_PATH}
  cdc:
    publication-name: "transactional_outbox_pub"
    slot-name: "debezium_notification_service_slot"
    name: "postgres-transactional-outbox-connector"
    plugin-name: "pgoutput"
    offset-storage-class: "org.apache.kafka.connect.storage.FileOffsetBackingStore"
    offset-storage-file-name: ${APP_CDC_OFFSET_STORAGE_FILE_FILENAME}
    offset-storage-file-folder-path: ${APP_CDC_OFFSET_STORAGE_FILE_FOLDER_PATH}
    offset-flush-interval-millis: 60000
    topic-prefix: ${APP_CDC_TOPIC_PREFIX}
    db-host: ${APP_POSTGRES_HOSTNAME}
    db-port: ${APP_POSTGRES_PORT}
    db-user: ${APP_POSTGRES_USER}
    db-password: ${APP_POSTGRES_PASSWORD}
    db-name: ${APP_POSTGRES_DB}
    schema-include-list: "public"
    table-include-list: "public.transactional_outbox"
    column-include-list: "public.transactional_outbox.id,public.transactional_outbox.name,public.transactional_outbox.topic,public.transactional_outbox.json,public.transactional_outbox.status,public.transactional_outbox.created_at"
  web-client:
    fileService: {
      protocol: ${APP_FILE_SERVICE_HTTP_PROTOCOL},
      host: ${APP_FILE_SERVICE_HOST},
      port: ${APP_FILE_SERVICE_PORT}
    }


server:
  port: ${APP_SERVER_PORT}

spring:
  mail:
    host: smtp.yandex.ru
    port: 465
    username: Koval3nich
    password: gqntfohlgaddeknn
    default-encoding: UTF-8
    protocol: smtp
    properties:
      mail:
        smtp:
          auth: true
          ssl:
            enable: true

  kafka:
    consumer:
      auto-offset-reset: earliest
      properties:
        spring.json.trusted.packages.packages: "*"
      heartbeat-interval: 15000
      session-timeout: 45000
      max-poll-interval: 300000
    admin:
      auto-create: off
      properties:
        client.id: my-admin-client
    bootstrap-servers: ${APP_KAFKA_BOOTSTRAP_SERVER}

  freemarker:
    cache: false
    charset: UTF-8
    check-template-location: false
    suffix: ".html"
  r2dbc:
    url: ${APP_POSTGRES_R2DBC_URL}
    username: ${APP_POSTGRES_USER}
    password: ${APP_POSTGRES_PASSWORD}
    pool:
      enabled: true
      initial-size: 5
      max-size: 20
      max-idle-time: 30m
      validation-query: SELECT 1
  data:
    r2dbc:
      repositories:
        enabled: true

resilience4j:
  retry:
    configs:
      default:
        max-attempts: 3
        wait-duration: 500ms
        enable-exponential-backoff: false
        exponential-backoff-multiplier: 2
        enable-random-wait: false
    instances:
      otpRetry:
        base-config: default
        retry-exceptions:
          - java.lang.RuntimeException
          - java.lang.Exception
